#!/usr/bin/python
import math
import random
import numpy
import json
from sklearn.linear_model import LogisticRegression

#random.seed(3)
WINLEN=7
HALFLEN=WINLEN//2

#load predictor
with open("predictor.prm",'r') as f:
   params=json.load(f)
model=LogisticRegression()
model.set_params(**params["params"])
model.coef_=numpy.array(params["coef"])
model.intercept_=numpy.array(params["intercept"])

class permutator():
    def __init__(self):
        pass

    def _swap(self,seq):
        pos1,pos2=random.sample(range(0,len(seq)),2)
        seq[pos1],seq[pos2]=seq[pos2],seq[pos1]
        return seq

    def _reverse(self,seq):
        pos1,pos2=random.sample(range(0,len(seq)+1),2)
        if pos1>pos2: pos1,pos2=pos2,pos1
        nseq=[*seq[:pos1],*seq[pos1:pos2][::-1],*seq[pos2:]]
        return nseq

    def _shift(self,seq):
        pos1,pos2=random.sample(range(0,len(seq)),2)
        if pos1>pos2: pos1,pos2=pos2,pos1
        if random.choice((0,1)):    
            nseq=[*seq[:pos1],seq[pos2],*seq[pos1:pos2-1],*seq[pos2:]]    
        else:
            nseq=[*seq[:pos1],*seq[pos1+1:pos2],seq[pos1],*seq[pos2:]]    
        return nseq 

    def _shuffle(self,seq):
        pos1,pos2=random.sample(range(0,len(seq)+1),2)
        if pos1>pos2: pos1,pos2=pos2,pos1
        x=seq[pos1:pos2]
        random.shuffle(x)
        nseq=[*seq[:pos1],*x,*seq[pos2:]]
        return nseq

    def permutate(self,seq):
        s=seq[:]
        k=random.choice(range(20))
        if k==0:
            s=self._reverse(s)
        elif k==1:
            s=self._shift(s)
        elif k==2:
            s=self._shuffle(s)
        else:
            s=self._swap(s)
        return s

AAA="ACDEFGHIKLMNPQRSTVWY"
SSS="~HE"

def make_vec(ai,si):
    v=[]
    for ii,(aa, ss) in enumerate(zip(ai,si)):
        vv=numpy.zeros(23)
        if ii!=HALFLEN: vv[aa]=1
        vv[ss+20]=1
        v.append(vv)
    return numpy.array(v).flatten()


def seq_sc(sqi,ssi):
    ai=sqi[HALFLEN:-HALFLEN]
    x=[make_vec(sqi[pos-HALFLEN:pos+HALFLEN+1],ssi[pos-HALFLEN:pos+HALFLEN+1]) for pos in range(HALFLEN, len(sq)-HALFLEN)  ]
    pb=model.predict_proba(numpy.array(x))
    sc=sum(math.log(p[i]) for p,i in zip(pb,ai))
    return sc

def decode_sq(sqi):
   return "".join([AAA[s] for s in sqi])
   
def optimize(sqi,ssi):
   P=permutator()
   cur=seq_sc(sqi,ssi)
   noimpr=0
   MAXNOIMPR=10000
   while True:
#       nsqi=P.permutate(sqi[HALFLEN:-HALFLEN])
#       nsqi=[*sqi[:HALFLEN],*nsqi,*sqi[-HALFLEN:]]
       nsqi=P.permutate(sqi)
       new=seq_sc(nsqi,ssi)
       if new>cur:
           cur=new
           sqi=nsqi[:]
           print(decode_sq(sqi),cur)
           noimpr=0
       else:
           noimpr+=1
       if noimpr>MAXNOIMPR:
         print (f"No improvment in {MAXNOIMPR} cycles, stopping")
         break
   return (cur,sqi)


#ss="~~~~HHHHHHHHH~~~~~~HHHHHHHH~~~~~EEEEEEE~~~~~EEEEEEE~~~~~~HHHHHHH~~~~~EEEEEEEE~~~~"
#sq="ACDEFGHIKLMNPQRSTVWYACDEFGHIKLMNPQRSTVWYACDEFGHIKLMNPQRSTVWYACDE"
#ss="~~~~EEEEEEEEEE~~~~~HHHHHHHHHHH~~~~~~EEEEEEEEE~~~~~EEEEEEEEEE~~~~"
sq="MQIFVKTLTGKTITLEVEPSDTIENVKAKIQDKEGIPPDQQRLIFAGKQLEDGRTLSDYNIQKESTLHLVLRLRGG"
ss="~EEEEEE~~~~EEEEE~~~~~~HHHHHHHHHHHH~~~~~~EEEEEEEEE~~~~~~~~~~~~~~~~EEEEEE~~~~~"
ssi=[SSS.index(s) for s in ss]
sqi=[AAA.index(a) for a in sq]
print(seq_sc(sqi,ssi))

results=[]
for cyc in range(10):
   random.shuffle(sqi)
   results.append(optimize(sqi,ssi))
results.sort()
for sc,sq in results:
   print (sc,decode_sq(sq))