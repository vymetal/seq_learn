#!/usr/bin/python
import math
import random
import numpy
import json
from sklearn.linear_model import LogisticRegression

#random.seed(3)
WINLEN=5
HALFLEN=WINLEN//2

#load predictor
with open("predictor.prm",'r') as f:
   params=json.load(f)
   
models=[]
for ii in range(3):
   models.append(LogisticRegression())
   p=params[str(ii)]
   models[-1].set_params(**p["params"])
   models[-1].coef_=numpy.array(p["coef"])
   models[-1].intercept_=numpy.array(p["intercept"])
#model=LogisticRegression()
#model.set_params(**params["params"])
#model.coef_=numpy.array(params["coef"])
#model.intercept_=numpy.array(params["intercept"])

class permutator():
    def __init__(self):
        pass

    def _swap(self,seq):
        pos1,pos2=random.sample(range(0,len(seq)),2)
        seq[pos1],seq[pos2]=seq[pos2],seq[pos1]
        return seq

    def _reverse(self,seq):
        pos1,pos2=random.sample(range(0,len(seq)+1),2)
        if pos1>pos2: pos1,pos2=pos2,pos1
        nseq=[*seq[:pos1],*seq[pos1:pos2][::-1],*seq[pos2:]]
        return nseq

    def _shift(self,seq):
        pos1,pos2=random.sample(range(0,len(seq)),2)
        if pos1>pos2: pos1,pos2=pos2,pos1
        if random.choice((0,1)):
            nseq=[*seq[:pos1],seq[pos2],*seq[pos1:pos2-1],*seq[pos2:]]    
        else:
            nseq=[*seq[:pos1],*seq[pos1+1:pos2],seq[pos1],*seq[pos2:]]    
        return nseq 

    def _shuffle(self,seq):
        pos1,pos2=random.sample(range(0,len(seq)+1),2)
        if pos1>pos2: pos1,pos2=pos2,pos1
        x=seq[pos1:pos2]
        random.shuffle(x)
        nseq=[*seq[:pos1],*x,*seq[pos2:]]
        return nseq

    def permutate(self,seq):
        s=seq[:]
        k=random.choice(range(20))
        if k==0:
            s=self._reverse(s)
        elif k==1:
            s=self._shift(s)
        elif k==2:
            s=self._shuffle(s)
        else:
            s=self._swap(s)
        return s

AAA="ACDEFGHIKLMNPQRSTVWY"
SSS="~HE"

def make_vec(ai,si):
    v=[]
    for ii,(aa, ss) in enumerate(zip(ai,si)):
        vv=numpy.zeros(23)
        if ii!=HALFLEN: vv[aa]=1
        vv[ss+20]=1
        v.append(vv)
    return numpy.array(v).flatten()


def seq_sc(sqi,ssi):
    ai=sqi[HALFLEN:-HALFLEN]
    si=ssi[HALFLEN:-HALFLEN]
    x=[make_vec(sqi[pos-HALFLEN:pos+HALFLEN+1],ssi[pos-HALFLEN:pos+HALFLEN+1]) for pos in range(HALFLEN, len(sqi)-HALFLEN)  ]
    x=numpy.array(x)
    pbs=[models[0].predict_proba(x),models[1].predict_proba(x),models[2].predict_proba(x)]
    pb=[pbs[s][ii] for ii,s in enumerate(si)]
#    pb=model.predict_proba(numpy.array(x))
    sc=sum(math.log(p[i]) for p,i in zip(pb,ai))
    return sc

def propose_seq(ssi):
   distrib={0: [3241, 581, 4047, 2133, 1392, 6380, 1127, 1438, 2412, 2484, 632, 3408, 3767, 1560, 1764, 3782, 3062, 1886, 665, 1497],
            1: [4964, 425, 2390, 3336, 1687, 1522, 805, 2110, 2655, 4238, 1013, 1517, 1106, 1957, 2163, 2104, 1824, 2468, 824, 1618],
            2: [1777, 423, 1000, 1168, 1702, 1505, 671, 2569, 1285, 2647, 616, 931, 550, 879, 1155, 1555, 2104, 3599, 696, 1669]}
   distrib={0: [3360, 605, 3962, 2133, 1448, 6455, 1112, 1400, 2519, 2535, 610, 3420, 3841, 1517, 1731, 3815, 3087, 1950, 662, 1512], 1: [4995, 430, 2404, 3370, 1708, 1543, 796, 2112, 2714, 4246, 1035, 1548, 1139, 1996, 2206, 2117, 1812, 2484, 814, 1669], 2: [1758, 435, 1005, 1201, 1684, 1504, 659, 2572, 1330, 2626, 613, 911, 563, 874, 1171, 1555, 2136, 3698, 700, 1670]}
            
   for i in distrib:
      distrib[i]=numpy.array(distrib[i])*1.0/sum(distrib[i])
   sqi=[numpy.random.choice(20,1,p=distrib[i])[0] for i in ssi]
   return sqi 

def decode_sq(sqi):
   return "".join([AAA[s] for s in sqi])
   
def optimize(sqi,ssi):
   P=permutator()
   cur=seq_sc(sqi,ssi)
   noimpr=0
   MAXNOIMPR=1000
   while True:
       nsqi=P.permutate(sqi)
       new=seq_sc(nsqi,ssi)
       if new>cur:
           cur=new
           sqi=nsqi[:]
           print(decode_sq(sqi),cur)
           noimpr=0
       else:
           noimpr+=1
       if noimpr>MAXNOIMPR:
         print (f"No improvment in {MAXNOIMPR} cycles, stopping")
         break
   return (cur,sqi)


#ss="~~~~HHHHHHHHH~~~~~~HHHHHHHH~~~~~EEEEEEE~~~~~EEEEEEE~~~~~~HHHHHHH~~~~~EEEEEEEE~~~~"
#sq="ACDEFGHIKLMNPQRSTVWYACDEFGHIKLMNPQRSTVWYACDEFGHIKLMNPQRSTVWYACDE"
#ss="~~~~EEEEEEEEEE~~~~~HHHHHHHHHHH~~~~~~EEEEEEEEE~~~~~EEEEEEEEEE~~~~"
#sq="MQIFVKTLTGKTITLEVEPSDTIENVKAKIQDKEGIPPDQQRLIFAGKQLEDGRTLSDYNIQKESTLHLVLRLRGG"
ss="~~~EEEEEEEEEEEEE~~~~~~~~EEEEEEEEEEEEEEEEEEEEE~~~~~~~~EEEEEEEEEEEEEEEEEEE~~~~"
#ss="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
#ss="~EEEEEE~~~~EEEEE~~~~~~HHHHHHHHHHHH~~~~~~EEEEEEEEE~~~~~~~~~~~~~~~~EEEEEE~~~~~"
ssi=[SSS.index(s) for s in ss]
#sqi=[AAA.index(a) for a in sq]
sqi=propose_seq(ssi)
print(seq_sc(sqi,ssi))

results=[]
for cyc in range(10):
   random.shuffle(sqi)
   print('start:',decode_sq(sqi))
   results.append(optimize(sqi[:],ssi))
   results.sort()
   #results continuously
   for sc,sq in results:
      print (sc,decode_sq(sq))
      print (sc,ss)