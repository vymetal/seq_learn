#!/usr/bin/python

from seqdata import getset,toseq
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import random
import math
import matplotlib.pylab as plt
import numpy
import json

random.seed(42)

WINLEN=5
HALFLEN=WINLEN//2

X,y=getset(WINLEN)
X0_train,X0_test,y0_train,y0_test = train_test_split(X,y,random_state=1234567, shuffle=True)

#get secondary structure
ss_train=numpy.array([toseq(x).split('|')[1][HALFLEN] for x in X0_train])
ss_test=numpy.array([toseq(x).split('|')[1][HALFLEN] for x in X0_test])

models=[]
for selm in ('~','H','E'):
   X_train=X0_train[ss_train==selm]
   y_train=y0_train[ss_train==selm]
   X_test=X0_test[ss_test==selm]
   y_test=y0_test[ss_test==selm]
   
   #fit model
   models.append(LogisticRegression(class_weight="balanced", penalty='l2',solver='lbfgs',multi_class="ovr", C=1, max_iter=500))
   models[-1].fit(X_train, y_train)
   yp=models[-1].predict(X_test)
   print("overall accuracy:",sklearn.metrics.accuracy_score(y_test,yp))
   print("per aa-accuracy:")
   sd=[]
   for aa in range(20):
      gt=y_test==aa
      pa=yp==aa
      tp=numpy.sum(numpy.logical_and(pa,gt))
      tn=numpy.sum(numpy.logical_and(numpy.logical_not(pa),numpy.logical_not(gt)))
      fp=numpy.sum(numpy.logical_and(pa,numpy.logical_not(gt)))
      fn=numpy.sum(numpy.logical_and(numpy.logical_not(pa),gt))
      sd.append([tp/(tp+fp),tp/(tp+fn),tn/(tn+fp)])
      #print(f"tp:{tp}, tn:{tn}, fp:{fp} fn:{fn} accuracy:{(tp+tn)/(tp+tn+fp+fn)}, precision:{tp/(tp+fp)}, sensitivity:{tp/(tp+fn)}, specificity:{tn/(tn+fp)}")
      print('ACDEFGHIKLMNPQRSTVWY'[aa],f"prec:{sd[-1][0]:.3f}, sens:{sd[-1][1]:.3f}, spec:{sd[-1][2]:.3f}")
   print (numpy.mean(sd, axis=0))

#save parameters as json
params={0:{},1:{},2:{}}
for ii, model in enumerate(models):
   params[ii]['params']=model.get_params()
   params[ii]['coef']=model.coef_.tolist()
   params[ii]['intercept']=model.intercept_.tolist()
json_txt=json.dumps(params)
with open("predictor.prm",'w') as f:
   f.write(json_txt)
